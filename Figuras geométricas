<!DOCTYPE html>
<html lang="pt-BR">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Calculadora de Áreas - Fernando Assunção</title>
<style>
  @import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&display=swap');

  * {
    box-sizing: border-box;
  }
  body {
    font-family: 'Montserrat', sans-serif;
    background: linear-gradient(135deg, #74ebd5 0%, #ACB6E5 100%);
    margin: 0;
    padding: 0 10px 40px;
    display: flex;
    flex-direction: column;
    align-items: center;
    min-height: 100vh;
    color: #1b2735;
  }
  h1 {
    margin-top: 30px;
    color: #0d3b66;
    text-align: center;
  }
  .container {
    background: white;
    max-width: 480px;
    width: 100%;
    border-radius: 16px;
    box-shadow: 0 10px 25px rgba(0,0,0,0.1);
    padding: 25px 30px 40px;
    margin: 20px auto;
  }
  label {
    display: block;
    margin-top: 15px;
    font-weight: 600;
    color: #0d3b66;
  }
  input[type="number"] {
    width: 100%;
    padding: 10px 14px;
    margin-top: 6px;
    font-size: 1rem;
    border-radius: 12px;
    border: 2px solid #74b9ff;
    transition: border-color 0.3s;
  }
  input[type="number"]:focus {
    border-color: #0984e3;
    outline: none;
  }
  select {
    width: 100%;
    padding: 10px 14px;
    border-radius: 12px;
    border: 2px solid #74b9ff;
    font-size: 1rem;
    margin-top: 8px;
    cursor: pointer;
    transition: border-color 0.3s;
  }
  select:focus {
    border-color: #0984e3;
    outline: none;
  }
  .botoes {
    margin-top: 25px;
    display: flex;
    gap: 12px;
    flex-wrap: wrap;
  }
  button {
    flex: 1 1 30%;
    padding: 14px 0;
    background: #0984e3;
    color: white;
    font-size: 1.1rem;
    font-weight: 700;
    border: none;
    border-radius: 16px;
    cursor: pointer;
    box-shadow: 0 5px 15px rgba(9,132,227,0.4);
    transition: background-color 0.3s;
    min-width: 100px;
  }
  button:hover {
    background: #0652dd;
  }
  .resultado, .passo-passo {
    margin-top: 25px;
    background: #dff9fb;
    border-radius: 14px;
    padding: 18px 22px;
    color: #130f40;
    box-shadow: inset 0 0 8px #00a8ff44;
  }
  .passo-passo {
    font-family: monospace;
    white-space: pre-line;
    font-size: 0.9rem;
    margin-top: 12px;
  }
  .svg-container {
    margin-top: 30px;
    text-align: center;
  }
  svg {
    width: 220px;
    height: 220px;
    stroke-width: 3;
    stroke-linejoin: round;
    border-radius: 14px;
    box-shadow: 0 8px 18px rgba(0,0,0,0.1);
  }
  /* Cores para as figuras */
  .quadrado polygon {
    fill: #fd79a8;
    stroke: #d63031;
  }
  .retangulo rect {
    fill: #74b9ff;
    stroke: #0984e3;
  }
  .triangulo polygon {
    fill: #55efc4;
    stroke: #00b894;
  }
  .circulo circle {
    fill: #ffeaa7;
    stroke: #fdcb6e;
  }
  .trapezio polygon {
    fill: #a29bfe;
    stroke: #6c5ce7;
  }
  .losango polygon {
    fill: #fab1a0;
    stroke: #e17055;
  }
  footer {
    margin-top: auto;
    text-align: center;
    font-size: 0.9rem;
    color: #0d3b66;
    padding: 15px 0;
    font-weight: 600;
  }
  /* Modal histórico */
  .modal-bg {
    display: none;
    position: fixed;
    top: 0; left: 0; right: 0; bottom: 0;
    background: rgba(0,0,0,0.4);
    z-index: 9999;
    justify-content: center;
    align-items: center;
  }
  .modal-bg.active {
    display: flex;
  }
  .modal {
    background: white;
    max-width: 450px;
    width: 90%;
    max-height: 70vh;
    overflow-y: auto;
    border-radius: 16px;
    padding: 20px 25px;
    box-shadow: 0 8px 24px rgba(0,0,0,0.2);
  }
  .modal h2 {
    margin-top: 0;
    color: #0d3b66;
  }
  .modal ul {
    list-style: none;
    padding-left: 0;
  }
  .modal ul li {
    margin-bottom: 12px;
    font-family: monospace;
    font-size: 0.9rem;
    border-bottom: 1px solid #d3d3d3;
    padding-bottom: 8px;
  }
  .modal button.close {
    margin-top: 15px;
    background: #d63031;
    box-shadow: 0 5px 15px rgba(214,50,49,0.6);
  }
  .modal button.close:hover {
    background: #b22222;
  }
  @media (max-width: 400px) {
    svg {
      width: 160px;
      height: 160px;
    }
    button {
      flex: 1 1 100%;
    }
  }
</style>
</head>
<body>

<h1>Calculadora de Áreas</h1>

<div class="container">

  <label for="figura">Escolha a figura geométrica:</label>
  <select id="figura" aria-label="Selecionar figura geométrica">
    <option value="quadrado">Quadrado</option>
    <option value="retangulo">Retângulo</option>
    <option value="triangulo">Triângulo</option>
    <option value="circulo">Círculo</option>
    <option value="trapezio">Trapézio</option>
    <option value="losango">Losango</option>
  </select>

  <form id="formulario" style="margin-top:20px;">
    <!-- Inputs serão gerados aqui dinamicamente -->
  </form>

  <div class="botoes">
    <button id="btnCalcular" type="button">Calcular Área</button>
    <button id="btnLimpar" type="button" style="background:#b2bec3; color:#2d3436;">Limpar</button>
    <button id="btnHistorico" type="button" style="background:#6c5ce7;">Ver Histórico</button>
    <button id="btnBaixar" type="button" style="background:#00b894;">Baixar Histórico</button>
  </div>

  <div class="resultado" id="resultado" style="display:none;"></div>
  <div class="passo-passo" id="passoPasso" style="display:none;"></div>

  <div class="svg-container" id="svgContainer" style="display:none;">
    <!-- SVG dinâmico -->
  </div>

</div>

<!-- Modal histórico -->
<div class="modal-bg" id="modalHistorico" role="dialog" aria-modal="true" aria-labelledby="modalTitulo">
  <div class="modal">
    <h2 id="modalTitulo">Histórico de Cálculos</h2>
    <ul id="listaHistorico">
      <!-- histórico será inserido aqui -->
    </ul>
    <button class="close" id="fecharModal">Fechar</button>
  </div>
</div>

<footer>Desenvolvido por Fernando Assunção</footer>

<script>
  const figuraSelect = document.getElementById('figura');
  const formulario = document.getElementById('formulario');
  const btnCalcular = document.getElementById('btnCalcular');
  const btnLimpar = document.getElementById('btnLimpar');
  const btnHistorico = document.getElementById('btnHistorico');
  const btnBaixar = document.getElementById('btnBaixar');
  const resultadoEl = document.getElementById('resultado');
  const passoPassoEl = document.getElementById('passoPasso');
  const svgContainer = document.getElementById('svgContainer');
  const modalHistorico = document.getElementById('modalHistorico');
  const listaHistorico = document.getElementById('listaHistorico');
  const fecharModal = document.getElementById('fecharModal');

  // Histórico armazenado em memória
  const historico = [];

  // Dados para cada figura: inputs, fórmula, cálculo e SVG
  const figuras = {
    quadrado: {
      nome: 'Quadrado',
      inputs: [
        { id: 'lado', label: 'Lado (cm)', placeholder: 'Ex: 5' },
      ],
      formula: (v) => v.lado ** 2,
      formulaTexto: 'A = lado²',
      passo: (v, area) => 
        `Passo a passo:\n\n` +
        `1. Fórmula: A = lado × lado\n` +
        `2. Substituindo: A = ${v.lado} × ${v.lado}\n` +
        `3. Calculando: A = ${area} cm²`,
      svg: `<svg viewBox="0 0 200 200" class="quadrado" role="img" aria-label="Quadrado">
              <polygon points="30,30 170,30 170,170 30,170" />
            </svg>`
    },

    retangulo: {
      nome: 'Retângulo',
      inputs: [
        { id: 'base', label: 'Base (cm)', placeholder: 'Ex: 8' },
        { id: 'altura', label: 'Altura (cm)', placeholder: 'Ex: 5' }
      ],
      formula: (v) => v.base * v.altura,
      formulaTexto: 'A = base × altura',
      passo: (v, area) => 
        `Passo a passo:\n\n` +
        `1. Fórmula: A = base × altura\n` +
        `2. Substituindo: A = ${v.base} × ${v.altura}\n` +
        `3. Calculando: A = ${area} cm²`,
      svg: `<svg viewBox="0 0 220 140" class="retangulo" role="img" aria-label="Retângulo">
              <rect x="20" y="20" width="180" height="100" />
            </svg>`
    },

    triangulo: {
      nome: 'Triângulo',
      inputs: [
        { id: 'base', label: 'Base (cm)', placeholder: 'Ex: 10' },
        { id: 'altura', label: 'Altura (cm)', placeholder: 'Ex: 6' }
      ],
      formula: (v) => (v.base * v.altura) / 2,
      formulaTexto: 'A = (base × altura) ÷ 2',
      passo: (v, area) => 
        `Passo a passo:\n\n` +
        `1. Fórmula: A = (base × altura) ÷ 2\n` +
        `2. Substituindo: A = (${v.base} × ${v.altura}) ÷ 2\n` +
        `3. Calculando: A = ${area} cm²`,
      svg: `<svg viewBox="0 0 220 200" class="triangulo" role="img" aria-label="Triângulo">
              <polygon points="110,20 190,180 30,180" />
            </svg>`
    },

    circulo: {
      nome: 'Círculo',
      inputs: [
        { id: 'raio', label: 'Raio (cm)', placeholder: 'Ex: 7' }
      ],
      formula: (v) => Math.PI * v.raio ** 2,
      formulaTexto: 'A = π × raio²',
      passo: (v, area) => 
        `Passo a passo:\n\n` +
        `1. Fórmula: A = π × raio²\n` +
        `2. Substituindo: A = π × ${v.raio}²\n` +
        `3. Calculando: A ≈ ${area.toFixed(2)} cm²`,
      svg: `<svg viewBox="0 0 220 220" class="circulo" role="img" aria-label="Círculo">
              <circle cx="110" cy="110" r="90" />
            </svg>`
    },

    trapezio: {
      nome: 'Trapézio',
      inputs: [
        { id: 'baseMaior', label: 'Base maior (cm)', placeholder: 'Ex: 10' },
        { id: 'baseMenor', label: 'Base menor (cm)', placeholder: 'Ex: 6' },
        { id: 'altura', label: 'Altura (cm)', placeholder: 'Ex: 5' }
      ],
      formula: (v) => ((parseFloat(v.baseMaior) + parseFloat(v.baseMenor)) * v.altura) / 2,
      formulaTexto: 'A = ((Base maior + Base menor) × Altura) ÷ 2',
      passo: (v, area) => 
        `Passo a passo:\n\n` +
        `1. Fórmula: A = ((Base maior + Base menor) × Altura) ÷ 2\n` +
        `2. Substituindo: A = ((${v.baseMaior} + ${v.baseMenor}) × ${v.altura}) ÷ 2\n` +
        `3. Calculando: A = ${area} cm²`,
      svg: `<svg viewBox="0 0 220 160" class="trapezio" role="img" aria-label="Trapézio">
              <polygon points="40,130 180,130 150,30 70,30" />
            </svg>`
    },

    losango: {
      nome: 'Losango',
      inputs: [
        { id: 'diagonalMaior', label: 'Diagonal maior (cm)', placeholder: 'Ex: 12' },
        { id: 'diagonalMenor', label: 'Diagonal menor (cm)', placeholder: 'Ex: 8' }
      ],
      formula: (v) => (v.diagonalMaior * v.diagonalMenor) / 2,
      formulaTexto: 'A = (Diagonal maior × Diagonal menor) ÷ 2',
      passo: (v, area) => 
        `Passo a passo:\n\n` +
        `1. Fórmula: A = (Diagonal maior × Diagonal menor) ÷ 2\n` +
        `2. Substituindo: A = (${v.diagonalMaior} × ${v.diagonalMenor}) ÷ 2\n` +
        `3. Calculando: A = ${area} cm²`,
      svg: `<svg viewBox="0 0 220 220" class="losango" role="img" aria-label="Losango">
              <polygon points="110,20 190,110 110,200 30,110" />
            </svg>`
    },
  };

  // Função para criar inputs de acordo com a figura selecionada
  function criarInputs(figura) {
    formulario.innerHTML = '';
    const f = figuras[figura];
    f.inputs.forEach(input => {
      const label = document.createElement('label');
      label.setAttribute('for', input.id);
      label.textContent = input.label;
      formulario.appendChild(label);

      const inp = document.createElement('input');
      inp.type = 'number';
      inp.id = input.id;
      inp.name = input.id;
      inp.min = "0.01";
      inp.step = "any";
      inp.placeholder = input.placeholder;
      inp.required = true;
      formulario.appendChild(inp);
    });
  }

  // Atualizar inputs ao mudar figura
  figuraSelect.addEventListener('change', () => {
    criarInputs(figuraSelect.value);
    limpar();
  });

  // Inicializa inputs no carregamento
  criarInputs(figuraSelect.value);

  // Limpar resultados e inputs
  function limpar() {
    formulario.reset();
    resultadoEl.style.display = 'none';
    passoPassoEl.style.display = 'none';
    svgContainer.style.display = 'none';
    svgContainer.innerHTML = '';
  }

  btnLimpar.addEventListener('click', () => {
    limpar();
  });

  // Validação e cálculo
  btnCalcular.addEventListener('click', () => {
    const figura = figuraSelect.value;
    const f = figuras[figura];
    // Obter valores dos inputs
    let valores = {};
    let valid = true;
    for (let input of f.inputs) {
      const el = document.getElementById(input.id);
      const val = parseFloat(el.value);
      if (isNaN(val) || val <= 0) {
        alert(`Por favor, insira um valor válido e positivo para "${input.label}".`);
        el.focus();
        valid = false;
        break;
      }
      valores[input.id] = val;
    }
    if (!valid) return;

    // Calcular área
    let area = f.formula(valores);
    if (figura === 'circulo') {
      area = parseFloat(area.toFixed(2)); // Arredondar para 2 casas decimais
    } else {
      area = parseFloat(area.toFixed(4)); // Até 4 casas decimais
    }

    // Mostrar resultado
    resultadoEl.innerHTML = `<strong>Área do(a) ${f.nome}:</strong> ${area} cm²`;
    resultadoEl.style.display = 'block';

    // Mostrar passo a passo
    passoPassoEl.textContent = f.passo(valores, area);
    passoPassoEl.style.display = 'block';

    // Mostrar SVG
    svgContainer.innerHTML = f.svg;
    svgContainer.style.display = 'block';

    // Adicionar ao histórico
    const dataHora = new Date().toLocaleString('pt-BR');
    const entradaFormatada = Object.entries(valores).map(([k,v]) => `${k}: ${v}`).join(', ');
    historico.push({
      dataHora,
      figura: f.nome,
      valores: entradaFormatada,
      area
    });
  });

  // Mostrar histórico
  btnHistorico.addEventListener('click', () => {
    if (historico.length === 0) {
      alert('Nenhum cálculo realizado ainda.');
      return;
    }
    listaHistorico.innerHTML = '';
    historico.forEach((item, i) => {
      const li = document.createElement('li');
      li.textContent = `${item.dataHora} - ${item.figura} - [${item.valores}] - Área: ${item.area} cm²`;
      listaHistorico.appendChild(li);
    });
    modalHistorico.classList.add('active');
  });

  fecharModal.addEventListener('click', () => {
    modalHistorico.classList.remove('active');
  });

  // Baixar histórico como arquivo .txt
  btnBaixar.addEventListener('click', () => {
    if (historico.length === 0) {
      alert('Nenhum cálculo para baixar.');
      return;
    }
    let texto = 'Histórico de Cálculos - Calculadora de Áreas\n\n';
    historico.forEach(item => {
      texto += `${item.dataHora} - ${item.figura}\n`;
      texto += `Valores: ${item.valores}\n`;
      texto += `Área: ${item.area} cm²\n`;
      texto += '-----------------------------\n';
    });

    const blob = new Blob([texto], {type: 'text/plain;charset=utf-8'});
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = `historico_calculos_${new Date().toISOString().slice(0,10)}.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  });

</script>

</body>
</html>
